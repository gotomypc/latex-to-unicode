require File.dirname(__FILE__) + '/data.rb'
require File.dirname(__FILE__) + '/translate.rb'

module LatexToUnicode
  grammar Latex
    rule expression
      ( frac / sqrt / combining / unary / grouped / atom )* {
        def value
          elements.map {|x| x.value }.join
        end
      }
    end

    rule frac
      '\frac' n:element d:element {
        def value
          LatexToUnicode::translate_fraction(n.value, d.value)
        end
      }
    end

    rule sqrt
      '\sqrt[' n:(!']' atom)+ ']' element {
        def value
          LatexToUnicode::translate_sqrt(element.value, n.text_value)
        end
      } /
      '\sqrt' element {
        def value
          LatexToUnicode::translate_sqrt(element.value, 2)
        end
      }
    end

    rule combining
      combining_command element {
        def value
          LatexToUnicode::translate_combining(element.value, 
            combining_command.text_value[1..-1].to_sym)
        end
      }
    end

    rule combining_command
      '\hat' / '\breve' / '\grave' / '\bar' / '\check' / '\acute' / '\tilde' /
      '\vec' / '\dot' / '\ddot' / '\mathring'
    end

    rule unary
      unary_command element {
        def value
          set = case (cmd = unary_command.text_value)
                when '_'   then LatexToUnicode::SUBSCRIPTS
                when '^'   then LatexToUnicode::SUPERSCRIPTS
                else
                  LatexToUnicode.const_get cmd[1..-1].upcase
                end
          LatexToUnicode::translate(element.value, set)
        end
      }
    end

    rule unary_command
      '^' / '_' / '\bb' / '\bf' / '\cal' / '\frak' / '\it' / '\mono'
    end

    rule element
      grouped / atom
    end

    rule grouped
      '{' expression '}' {
        def value
          expression.value
        end
      } 
    end

    rule atoms
      atom+ {
        def value
          text_value
        end
      }
    end

    rule atom
      [^{}\^_] {
        def value
          text_value
        end
      }
    end
  end
end
