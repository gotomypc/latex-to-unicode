# Autogenerated from a Treetop grammar. Edits may be lost.


require File.dirname(__FILE__) + '/data.rb'
require File.dirname(__FILE__) + '/translate.rb'

module LatexToUnicode
  module Latex
    include Treetop::Runtime

    def root
      @root ||= :expression
    end

    module Expression0
      def value
        elements.map {|x| x.value }.join
      end
    end

    def _nt_expression
      start_index = index
      if node_cache[:expression].has_key?(index)
        cached = node_cache[:expression][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      s0, i0 = [], index
      loop do
        i1 = index
        r2 = _nt_frac
        if r2
          r1 = r2
        else
          r3 = _nt_unary
          if r3
            r1 = r3
          else
            r4 = _nt_grouped
            if r4
              r1 = r4
            else
              r5 = _nt_atoms
              if r5
                r1 = r5
              else
                @index = i1
                r1 = nil
              end
            end
          end
        end
        if r1
          s0 << r1
        else
          break
        end
      end
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Expression0)

      node_cache[:expression][start_index] = r0

      r0
    end

    module Frac0
      def n
        elements[1]
      end

      def d
        elements[2]
      end
    end

    module Frac1
      def value
        LatexToUnicode::translate_fraction(n.value, d.value)
      end
    end

    def _nt_frac
      start_index = index
      if node_cache[:frac].has_key?(index)
        cached = node_cache[:frac][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('\\frac', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
        @index += 5
      else
        terminal_parse_failure('\\frac')
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_element
        s0 << r2
        if r2
          r3 = _nt_element
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Frac0)
        r0.extend(Frac1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:frac][start_index] = r0

      r0
    end

    module Unary0
      def unary_command
        elements[0]
      end

      def element
        elements[1]
      end
    end

    module Unary1
      def value
        set = case (cmd = unary_command.text_value)
              when '_'   then LatexToUnicode::SUBSCRIPTS
              when '^'   then LatexToUnicode::SUPERSCRIPTS
              else
                LatexToUnicode.const_get cmd[1..-1].upcase
              end
        LatexToUnicode::translate(element.value, set)
      end
    end

    def _nt_unary
      start_index = index
      if node_cache[:unary].has_key?(index)
        cached = node_cache[:unary][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_unary_command
      s0 << r1
      if r1
        r2 = _nt_element
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Unary0)
        r0.extend(Unary1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:unary][start_index] = r0

      r0
    end

    def _nt_unary_command
      start_index = index
      if node_cache[:unary_command].has_key?(index)
        cached = node_cache[:unary_command][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      if has_terminal?('^', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('^')
        r1 = nil
      end
      if r1
        r0 = r1
      else
        if has_terminal?('_', false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('_')
          r2 = nil
        end
        if r2
          r0 = r2
        else
          if has_terminal?('\bb', false, index)
            r3 = instantiate_node(SyntaxNode,input, index...(index + 3))
            @index += 3
          else
            terminal_parse_failure('\bb')
            r3 = nil
          end
          if r3
            r0 = r3
          else
            if has_terminal?('\bf', false, index)
              r4 = instantiate_node(SyntaxNode,input, index...(index + 3))
              @index += 3
            else
              terminal_parse_failure('\bf')
              r4 = nil
            end
            if r4
              r0 = r4
            else
              if has_terminal?('\cal', false, index)
                r5 = instantiate_node(SyntaxNode,input, index...(index + 4))
                @index += 4
              else
                terminal_parse_failure('\cal')
                r5 = nil
              end
              if r5
                r0 = r5
              else
                if has_terminal?('\frak', false, index)
                  r6 = instantiate_node(SyntaxNode,input, index...(index + 5))
                  @index += 5
                else
                  terminal_parse_failure('\frak')
                  r6 = nil
                end
                if r6
                  r0 = r6
                else
                  if has_terminal?('\it', false, index)
                    r7 = instantiate_node(SyntaxNode,input, index...(index + 3))
                    @index += 3
                  else
                    terminal_parse_failure('\it')
                    r7 = nil
                  end
                  if r7
                    r0 = r7
                  else
                    if has_terminal?('\mono', false, index)
                      r8 = instantiate_node(SyntaxNode,input, index...(index + 5))
                      @index += 5
                    else
                      terminal_parse_failure('\mono')
                      r8 = nil
                    end
                    if r8
                      r0 = r8
                    else
                      @index = i0
                      r0 = nil
                    end
                  end
                end
              end
            end
          end
        end
      end

      node_cache[:unary_command][start_index] = r0

      r0
    end

    def _nt_element
      start_index = index
      if node_cache[:element].has_key?(index)
        cached = node_cache[:element][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_grouped
      if r1
        r0 = r1
      else
        r2 = _nt_atom
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:element][start_index] = r0

      r0
    end

    module Grouped0
      def atoms
        elements[1]
      end

    end

    module Grouped1
      def value
        atoms.value
      end
    end

    def _nt_grouped
      start_index = index
      if node_cache[:grouped].has_key?(index)
        cached = node_cache[:grouped][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('{', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('{')
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_atoms
        s0 << r2
        if r2
          if has_terminal?('}', false, index)
            r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('}')
            r3 = nil
          end
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Grouped0)
        r0.extend(Grouped1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:grouped][start_index] = r0

      r0
    end

    module Atoms0
      def value
        text_value
      end
    end

    def _nt_atoms
      start_index = index
      if node_cache[:atoms].has_key?(index)
        cached = node_cache[:atoms][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      s0, i0 = [], index
      loop do
        r1 = _nt_atom
        if r1
          s0 << r1
        else
          break
        end
      end
      if s0.empty?
        @index = i0
        r0 = nil
      else
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Atoms0)
      end

      node_cache[:atoms][start_index] = r0

      r0
    end

    module Atom0
      def value
        text_value
      end
    end

    def _nt_atom
      start_index = index
      if node_cache[:atom].has_key?(index)
        cached = node_cache[:atom][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?('\G[^{}\\^_]', true, index)
        r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
        r0.extend(Atom0)
        @index += 1
      else
        r0 = nil
      end

      node_cache[:atom][start_index] = r0

      r0
    end

  end

  class LatexParser < Treetop::Runtime::CompiledParser
    include Latex
  end

end
